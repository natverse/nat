% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/xyzmatrix.R
\name{xyzmatrix}
\alias{xyzmatrix}
\alias{xyzmatrix.default}
\alias{xyzmatrix.list}
\alias{xyzmatrix.character}
\alias{xyzmatrix.neuron}
\alias{xyzmatrix.neuronlist}
\alias{xyzmatrix.shapelist3d}
\alias{xyzmatrix.dotprops}
\alias{xyzmatrix.hxsurf}
\alias{xyzmatrix.igraph}
\alias{xyzmatrix.mesh3d}
\alias{xyzmatrix<-}
\alias{xyzmatrix<-.character}
\alias{xyzmatrix2str}
\alias{xyzmatrix2list}
\alias{xyzmatrix<-.neuron}
\alias{xyzmatrix<-.dotprops}
\alias{xyzmatrix<-.hxsurf}
\alias{xyzmatrix<-.igraph}
\alias{xyzmatrix<-.shape3d}
\alias{xyzmatrix<-.mesh3d}
\alias{xyzmatrix<-.neuronlist}
\alias{xyzmatrix<-.shapelist3d}
\title{Get and assign coordinates for classes containing 3D vertex data}
\usage{
xyzmatrix(x, ...)

\method{xyzmatrix}{default}(x, y = NULL, z = NULL, ...)

\method{xyzmatrix}{list}(x, empty2na = TRUE, ...)

\method{xyzmatrix}{character}(x, ...)

\method{xyzmatrix}{neuron}(x, ...)

\method{xyzmatrix}{neuronlist}(x, ...)

\method{xyzmatrix}{shapelist3d}(x, ...)

\method{xyzmatrix}{dotprops}(x, ...)

\method{xyzmatrix}{hxsurf}(x, ...)

\method{xyzmatrix}{igraph}(x, ...)

\method{xyzmatrix}{mesh3d}(x, ...)

xyzmatrix(x) <- value

\method{xyzmatrix}{character}(x) <- value

xyzmatrix2str(x, format = "\%g,\%g,\%g", sep = NULL)

xyzmatrix2list(x)

\method{xyzmatrix}{neuron}(x) <- value

\method{xyzmatrix}{dotprops}(x) <- value

\method{xyzmatrix}{hxsurf}(x) <- value

\method{xyzmatrix}{igraph}(x) <- value

\method{xyzmatrix}{shape3d}(x) <- value

\method{xyzmatrix}{mesh3d}(x) <- value

\method{xyzmatrix}{neuronlist}(x) <- value

\method{xyzmatrix}{shapelist3d}(x) <- value
}
\arguments{
\item{x}{object containing 3D coordinates}

\item{...}{additional arguments passed to methods}

\item{y, z}{separate y and z coordinates}

\item{empty2na}{Whether or not to convert empty elements (\code{NULL} or
\code{list()}) into NAs. Default \code{TRUE}.}

\item{value}{Nx3 matrix specifying new xyz coords}

\item{format}{A \code{\link{sprintf}} compatible format string. The default
will give comma separated values.}

\item{sep}{A character vector specifying a separator string. Overrides
\code{format} when present. The default value of \code{format} is
equivalent to \code{sep=","}.}
}
\value{
For \code{xyzmatrix}: Nx3 matrix containing 3D coordinates

For \code{xyzmatrix<-}: Original object with modified coords
}
\description{
\code{xyzmatrix} gets coordinates from objects containing 3D vertex data

\code{xyzmatrix.list} will parse a list containing triplets of 3
  numeric values.

\code{xyzmatrix<-} assigns xyz elements of neuron or dotprops
  object and can also handle matrix like objects with columns named X, Y, Z
  or x, y, z.

\code{xyzmatrix2str} will convert the XYZ locations associated
  with an object to a character vector (by default comma separated).

\code{xyzmatrix2list} will convert the Nx3 matrix of XYZ
  locations associated with an object to a list of length N with each element
  a vector of length 3.
}
\details{
Note that \code{xyzmatrix} can extract or set 3D coordinates in a
  \code{matrix} or \code{data.frame} that \bold{either} has exactly 3 columns
  \bold{or} has 3 columns named X,Y,Z or x,y,z. As of Nov 2020, if these
  columns are character vectors, they will be correctly converted to numeric
  (with a warning for any NA values). As of Jan 2021 if \code{x} is a numeric
  vector containing exactly 3 numbers it will be parsed as a 1x3 matrix.
  Support has also been added for setting a list containing 3-vectors in each
  element.
}
\section{Getting and setting from character vectors}{


  \code{xyzmatrix} can also both get and set 3D coordinates from a character
  vector (including a single data frame column) in which each string encodes
  all 3 coordinates e.g. \code{"-1, 4, 10"}. It should handle a range of
  separators such as spaces, tabs, commas, semicolons and ignore extraneous
  characters such as brackets. Note that data are rounded by
  \code{\link{zapsmall}} in the replacement version to try to avoid cases
  where rounding errors result in long strings of digits to the right of the
  decimal place.

  Replacement into character vectors introduces a number of corner cases when
  there are not exactly 3 numbers to replace in the target vector. We handle
  them as follows: \itemize{

  \item 0 values in target, >0 in replacement: use a default pattern

  \item 1-2 values in target, same number of "good" values in replacement:
  insert those replacement value

  \item 1-2 values in target, different number of values in replacement: use
  default pattern, give a \code{warning}

  }

  The default pattern will be the first entry in \code{x} with 3 numbers.
  Should there not be such a value, then the pattern will be \code{"x, y,
  z"}.
}

\examples{
# see all available methods for different classes
methods('xyzmatrix')
# ... and for the assignment method
methods('xyzmatrix<-')

# basic usage
xyzmatrix(cbind(-1,2,3))

# character vector - useful e.g. when encoded in 1 column of a table 
str123="(-1,+2,3)"
xyzmatrix(str123)
# replace
xyzmatrix(str123) <- xyzmatrix(str123)/3
str123
xyzmatrix(str123) <- xyzmatrix(str123)*3
str123
n=Cell07PNs[[1]]
xyzmatrix(n)<-xyzmatrix(n)
stopifnot(isTRUE(
  all.equal(xyzmatrix(n),xyzmatrix(Cell07PNs[[1]]))
))
head(xyzmatrix2str(kcs20[[1]]))
head(xyzmatrix2str(kcs20[[1]], format="(\%g;\%g;\%g)"))
# if you want to process the xyz locations (here rounded to nearest nm)
# you must extract them from complex objects yourself
xyzmatrix2str(round(xyzmatrix(kcs20[[1]])*1000), format="\%d,\%d,\%d")[1:3]
xyzmatrix2list(kcs20[[1]])[1:2]
}
\seealso{
\code{\link{xyzmatrix}}
}
